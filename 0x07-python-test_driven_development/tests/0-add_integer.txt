How to use 0-add_integer.py
===========================

The module defines an integer addition function 'add_integer(a, b=98)'

Usage:
======

The function returns the addition of two integers supplied as its arguments


	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(3, 5)
	8

 
	>>> add_integer(-1, -2)
	-3

The function add floating point numbers
 

	>>> add_integer(3.0, 2.0)
	5

It is worthy to note that the function cast floats into ints before addition,
ignoring the decimal point remainders

 
	>>> add_integer(1.9, 2.3)
	3

 

When one argument is supplied, b is automatically set to 98 (as seen in the
function definition)

 
	>>> add_integer(1)
	99
 


When non-ingers are supplied
When a non-integer or a non-float is passed as argument(s) TypeError is raised
 

	>>> add_integer("Hello", 2)
	Traceback (most recent call last):
	TypeError: a must be an integer

 
	>>> add_integer(2, "Hello")
	Traceback (most recent call last):
	TypeError: b must be an integer

 

When 'None' is supplied as one of the arguments, TypeError is raised
	>>> add_integer(1, None)
	Traceback (most recent call last):
	TypeError: b must be an integer


	>>> add_integer(None, 2)
	Traceback (most recent call last):
	TypeError: a must be an integer

Note the difference when only None is supplied as argument. None is assigned
to 'a' and the 'a' exception message is displayed


	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

 

When infiinity 'inf' is supplied as the argument, an OverFlowError is raised

 
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer


This is irrespective of the argument position of 'inf'
 

	>>> add_integer(7, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer
 

	>>> add_integer(float('inf'), 9)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer


Same output when argument is a very large number irrespective of the position


	>>> add_integer(10e10000, 5)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

 

A valueError is raised when not a number (NaN) is parsed as argument

 
	>>> add_integer(float('NaN'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

 
	>>> add_integer(5, float('NaN'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer


	>>> add_integer(float('NaN'), 6)
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
