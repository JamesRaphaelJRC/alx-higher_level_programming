How to use '1-my_list.py'
=========================

The module '1-my_list.py' defines a class 'MyList' which inherits a list and
prints a sorted list (in ascending order).

It is worthy to note that in this documentation, we assume that 'list' contain
only integers

Usage:
======
First, lets import the module in python interractive session

	>>> my_list = __import__('1-my_list').MyList

Great!
Lets now pass our first list

	>>> my_list.print_sorted([3,1, 2])
	[1, 2, 3]


	>>> my_list.print_sorted([10e100, 10e2000])
	[1e+101, inf]


	>>> my_list.print_sorted([10e1000, 10e2000])
	[inf, inf]


	>>> my_list.print_sorted([True, False, False, True])
	[False, False, True, True]


It can handle negative integer values

	>>> my_list.print_sorted([-1, 0, -4, -8])
	[-8, -4, -1, 0]


What if an empty list is passed?, It handles it fine by returning an empty list

	>>> my_list.print_sorted([])
	[]

	
	>>> my_list.print_sorted([None])
	[None]


The class MyList must take 1 iterable argument otherwise TypeError is raised

	>>> my_list.print_sorted()
	Traceback (most recent call last):
	TypeError: print_sorted() missing 1 required positional argument: 'self'


	>>> my_list.print_sorted([3, 2, 1], [6, 5, 4])
	Traceback (most recent call last):
	TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given


	>>> my_list.print_sorted(3)
	Traceback (most recent call last):
	TypeError: 'int' object is not iterable


	>>> my_list.print_sorted(3, 2, 1)
	Traceback (most recent call last):
	TypeError: MyList.print_sorted() takes 1 positional argument but 3 were given


Since the class MyList is a list, it can still perform the basic list
operations like indexing, append, remove, etc.

	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> print(my_list)
	[1, 2, 3]


	>>> my_list.append(3)
	>>> my_list.append(2)
	>>> my_list.append(1)
	>>> my_list.print_sorted()
	[1, 1, 2, 2, 3, 3]
